/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package smile.identity.core;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;

import com.squareup.moshi.JsonAdapter;
import com.squareup.moshi.Moshi;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;

import smile.identity.core.enums.ImageType;
import smile.identity.core.enums.JobType;
import smile.identity.core.enums.Product;
import smile.identity.core.exceptions.InvalidImageDetails;
import smile.identity.core.exceptions.MissingRequiredFields;
import smile.identity.core.models.IdInfo;
import smile.identity.core.models.ImageDetail;
import smile.identity.core.models.JobResponse;
import smile.identity.core.models.JobStatusResponse;
import smile.identity.core.models.Options;
import smile.identity.core.models.PartnerParams;
import smile.identity.core.models.PreUploadResponse;

public class WebApiTest {


    private final Moshi moshi = MoshiUtils.getMoshi();
    private MockWebServer server;
    private WebApi webApi;

    @Before
    public void setup() {
        server = new MockWebServer();
        webApi = new WebApi("partner", "apikey", "callback",
                server.url("testing/").toString());
    }

    @After
    public void shutdown() throws IOException {
        server.shutdown();
    }

    @Test
    public void submitJob() throws Exception {
        server.enqueue(new MockResponse().setBody("{\"id_types\": {\"GH\":" +
                " { \"PASSPORT\": [\"first_name\", \"last_name\"]}}}"));
        server.enqueue(new MockResponse().setBody(uploadResponse()));
        server.enqueue(new MockResponse());
        PartnerParams partnerParams = new PartnerParams(
                JobType.BIOMETRIC_KYC, "user", "job", new HashMap<>()
        );


        IdInfo idInfo = new IdInfo(
                "Tom", "", "Ford", "GH",
                "PASSPORT", "1111111", "", ""
        );

        List<ImageDetail> imageDetails = new ArrayList<>();
        ImageDetail selfie = new ImageDetail(ImageType.SELFIE_BASE64,
				"imagedata", null);
        ImageDetail idCard = new ImageDetail(ImageType.ID_CARD_BASE64,
				"imagedata", null);
        imageDetails.add(selfie);
        imageDetails.add(idCard);

        Options options = new Options(false, false, false, "");

        JobStatusResponse job = webApi.submitJob(partnerParams, imageDetails,
				idInfo, options);
        server.takeRequest();
        server.takeRequest();
        RecordedRequest request = server.takeRequest();
        System.out.println(request.getPath());
        assertTrue(job.isJobSuccess());
        assertEquals(request.getPath(), "/testing/uploadphotoshere");
    }

    @Test
    public void submitBasicKYCJob() throws Exception {
        String validResponse = "{\"id_types\": {\"GH\": { \"PASSPORT\": " +
				"[\"id_number\"]}}}";
        server.enqueue(new MockResponse().setBody(validResponse));
        server.enqueue(new MockResponse().setBody(jobResponse()));


        PartnerParams partnerParams = new PartnerParams(
                JobType.BASIC_KYC, "user", "job", new HashMap<>()
        );

        IdInfo idInfo = new IdInfo(
                "Tom", "", "Ford", "GH",
                "PASSPORT", "1111111", "", ""
        );
        List<ImageDetail> imageDetails = new ArrayList<>();
        ImageDetail selfie = new ImageDetail(ImageType.SELFIE_BASE64,
				"imagedata", "");
        ImageDetail idCard = new ImageDetail(ImageType.ID_CARD_BASE64,
				"imagedata", null);
        imageDetails.add(selfie);
        imageDetails.add(idCard);

        Options options = new Options();

        JobStatusResponse job = webApi.submitJob(partnerParams, imageDetails,
				idInfo, options);
        assertTrue(job.isJobSuccess());
    }

    @Test
    public void missingSelfie() throws Exception {
        PartnerParams partnerParams = new PartnerParams(
                JobType.BIOMETRIC_KYC, "user", "job", new HashMap<>()
        );


        IdInfo idInfo = new IdInfo(
                "Tom", "", "Ford", "GH",
                "PASSPORT", "1111111", "", ""
        );

        List<ImageDetail> imageDetails = new ArrayList<>();
        ImageDetail idCard = new ImageDetail(ImageType.ID_CARD_BASE64,
				"imagedata", "");
        imageDetails.add(idCard);

        Options options = new Options();
        assertThrows(InvalidImageDetails.class,
                () -> webApi.submitJob(partnerParams, imageDetails, idInfo,
						options));

    }

    @Test
    public void emptyImageDetails() throws Exception {
        PartnerParams partnerParams = new PartnerParams(
                JobType.BIOMETRIC_KYC, "user", "job", new HashMap<>()
        );


        IdInfo idInfo = new IdInfo(
                "Tom", "", "Ford", "GH",
                "PASSPORT", "1111111", "", ""
        );

        List<ImageDetail> imageDetails = new ArrayList<>();

        Options options = new Options();
        assertThrows(InvalidImageDetails.class,
                () -> webApi.submitJob(partnerParams, imageDetails, idInfo,
						options));
    }

    @Test
    public void invalidIdInfo() throws IOException {
        server.enqueue(new MockResponse().setBody("{\"id_types\": {\"GH\":" +
                " { \"PASSPORT\": [\"first_name\", \"last_name\"]}}}"));

        PartnerParams partnerParams = new PartnerParams(
                JobType.BIOMETRIC_KYC, "user", "job", new HashMap<>()
        );


        IdInfo idInfo = new IdInfo(
                null, "", "Ford", "GH",
                "PASSPORT", "1111111", "", ""
        );

        List<ImageDetail> imageDetails = new ArrayList<>();
        ImageDetail selfie = new ImageDetail(ImageType.SELFIE_BASE64,
				"imagedata", "");
        ImageDetail idCard = new ImageDetail(ImageType.ID_CARD_BASE64,
				"imagedata", null);
        imageDetails.add(selfie);
        imageDetails.add(idCard);

        Options options = new Options();
        assertThrows(MissingRequiredFields.class,
                () -> webApi.submitJob(partnerParams, imageDetails, idInfo,
						options));
    }

    @Test
    public void failsEnrollWithIdValidation() {
        PartnerParams partnerParams = new PartnerParams(
                JobType.BIOMETRIC_KYC, "user", "job", new HashMap<>()
        );


        List<ImageDetail> imageDetails = new ArrayList<>();
        ImageDetail selfie = new ImageDetail(ImageType.SELFIE_BASE64,
				"imagedata", "");
        imageDetails.add(selfie);

        Options options = new Options();

        assertThrows(InvalidImageDetails.class,
                () -> webApi.submitJob(partnerParams, imageDetails, null,
                        options));

    }

    @Test
    public void callbackEmptyReturnJobFalse() {
        webApi = new WebApi("partner", "apikey", "", server.url("testing" +
                "/").toString());
        PartnerParams partnerParams = new PartnerParams(
                JobType.BIOMETRIC_KYC, "user", "job", new HashMap<>()
        );

        IdInfo idInfo = new IdInfo(
                "Tom", "", "Ford", "GH",
                "PASSPORT", "1111111", "", ""
        );


        List<ImageDetail> imageDetails = new ArrayList<>();
        ImageDetail selfie = new ImageDetail(ImageType.SELFIE_BASE64,
				"imagedata", "");
        ImageDetail idCard = new ImageDetail(ImageType.ID_CARD_BASE64,
				"imagedata", null);
        imageDetails.add(selfie);
        imageDetails.add(idCard);

        Options options = new Options(false, false, false, "");

        assertThrows(IllegalArgumentException.class,
                () -> webApi.submitJob(partnerParams, imageDetails, idInfo,
                        options));

    }

    @Test
    public void returnJobStatusTrue() throws Exception {
        JobStatusResponse statusResponse = new JobStatusResponse("90210",
                true, true, null, "signature", Instant.now(), null, null);

        server.enqueue(new MockResponse().setBody("{\"id_types\": {\"GH\":" +
                " { \"PASSPORT\": [\"first_name\", \"last_name\"]}}}"));
        server.enqueue(new MockResponse().setBody(uploadResponse()));
        server.enqueue(new MockResponse());
        server.enqueue(new MockResponse().setBody(moshi.adapter(JobStatusResponse.class).toJson(statusResponse)));

        PartnerParams partnerParams = new PartnerParams(
                JobType.BIOMETRIC_KYC, "user", "job", new HashMap<>()
        );

        IdInfo idInfo = new IdInfo(
                "Tom", "", "Ford", "GH",
                "PASSPORT", "1111111", "", ""
        );


        List<ImageDetail> imageDetails = new ArrayList<>();
        ImageDetail selfie = new ImageDetail(ImageType.SELFIE_BASE64,
				"imagedata", "");
        ImageDetail idCard = new ImageDetail(ImageType.ID_CARD_BASE64,
				"imagedata", null);
        imageDetails.add(selfie);
        imageDetails.add(idCard);

        Options options = new Options();

        JobStatusResponse job = webApi.submitJob(partnerParams, imageDetails, idInfo, options);

        assertTrue(job.isJobSuccess());
    }

    @Test
    public void getWebToken() throws Exception {
        server.enqueue(new MockResponse().setBody("{\"success\": true, \"token\": \"greattoken\"}"));
        String token = webApi.getWebToken(Instant.now().toString(), "user", "job", Product.BIOMETRIC_KYC, null);
        assert (token.equals("greattoken"));
    }


    private String uploadResponse() {
        PreUploadResponse response = new PreUploadResponse(
                "uploadphotoshere", "job-id", "", "", ""
        );

        Moshi moshi = new Moshi.Builder().build();
        JsonAdapter<PreUploadResponse> adapter = moshi.adapter(PreUploadResponse.class);
        return adapter.toJson(response);
    }

    private String jobResponse() {
        JobResponse response = new JobResponse("1.0",
                "smile-100",
                null,
                "Document Verification",
                "Great",
                "100",
                "Yes",
                null,
                "signature",
                Instant.now(),
                "99.99",
                "internet",
                new HashMap<>()
        );
        return moshi.adapter(JobResponse.class).toJson(response);
    }

}
